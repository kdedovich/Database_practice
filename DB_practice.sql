DROP SCHEMA IF EXISTS PODRUZHKA CASCADE;
CREATE SCHEMA PODRUZHKA;

DROP TABLE IF EXISTS PODRUZHKA.STOREHOUSE;
CREATE TABLE PODRUZHKA.STOREHOUSE (
  STOREHOUSE_ID	 INTEGER PRIMARY KEY,
  ADRESS	       VARCHAR(200) NOT NULL,
  DIRECTOR_NM	   VARCHAR(200) NOT NULL
);



INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (01, 'Москва, Старокачаловская ул., д. 1Б', 'Иванов И. А.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (02, 'Москва, Сходненская ул., д.52, корп.1', 'Петров Д. Е.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (03, 'Ступино, ул. Андропова, д.69', 'Сидоров С. П.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (04, 'Ростов-на-Дону, Буденновский пр-т, дом 17', 'Орлов В. И.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (05, 'Санкт-Петербург, Средний проспект В.О., д. 35А пом. 2Н', 'Фролов И. А.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (06, 'Санкт-Петербург, Железноводская ул., д. 68, литер А, пом. 12Н', 'Иванова Т. С.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (07, 'Рязань, Первомайский пр-т, д.70, корп.1', 'Адреев С. В.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (08, 'Рыбинск, ул. Бабушкина, д. 29', 'Платонова Е. О.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (09, 'Королев, Королева проспект, д. 9', 'Тарасов В. С.');
INSERT INTO PODRUZHKA.STOREHOUSE (STOREHOUSE_ID, ADRESS, DIRECTOR_NM) VALUES (10, 'Москва, Бирюлевская ул., д. 51 к.' , 'Петров И. А.');
DROP TABLE IF EXISTS PODRUZHKA.SHOP;


CREATE TABLE PODRUZHKA.SHOP (
  SHOP_ID	      INTEGER PRIMARY KEY,
  ADRESS	       VARCHAR(200) NOT NULL,
  OPEN_TM	       TIME NOT NULL,
  CLOSE_TM	     TIME NOT NULL,
  STOREHOUSE_ID	 INTEGER NOT NULL,
  DIRECTOR_NM	   VARCHAR(200),
  FOREIGN KEY(STOREHOUSE_ID) REFERENCES PODRUZHKA.STOREHOUSE(STOREHOUSE_ID),
  CHECK (OPEN_TM < CLOSE_TM)
);

--ИНДЕКС ПО АДРЕССУ, ТАК КАК АДРЕСС ДОЛЖЕН ВСТРЕЧАТЬСЯ ЧАЩЕ ВСЕГО В ЗАПРОСАХ ДЛЯ ЭТОЙ ТАБЛИЦЫ
CREATE INDEX INDEX_SHOP
ON PODRUZHKA.SHOP (ADRESS);

INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (01, 'Москва, Бажова ул., д. 8', '10:00', '20:00', 01, 'Иванова С. В.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (02, 'Москва, Новая ул., д 9', '10:00', '20:00', 02, 'Попов Н. Ф.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (03, 'Москва, Бирюлевская ул., д. 51 к. 1', '09:00', '19:00', 04, 'Николаев Г. В.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (04, 'Долгопрудный, Центральная ул., д. 5', '09:00', '19:00', 10, 'Тихонов С. А.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (05, 'Ростов-на-Дону, Ворошиловский пр-т, д.89/8', '08:00', '20:00', 05, 'Яковлев А. И.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (06, 'Рязань, Соборная ул., 15а', '10:00', '20:00', 08, 'Федорова Т. С.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (07, 'Санкт-Петербург, Большевиков проспект, д. 15Ц', '10:00', '20:00', 03, 'Александрова И. Н');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (08, 'Санкт-Петербург, Большая Разночинная ул., д. 16 лит.А', '09:00', '19:00', 06, 'Краснова Т. П.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (09, 'Санкт-Петербург, Большевиков проспект, д. 27А', '08:00', '18:00', 07, 'Иванов А. Л.');
INSERT INTO PODRUZHKA.SHOP (SHOP_ID, ADRESS, OPEN_TM, CLOSE_TM, STOREHOUSE_ID, DIRECTOR_NM)
VALUES (10, 'Ярославль, ул. Победы, д. 41', '10:00', '20:00', 09, 'Сидоров В. Р');

--ИНДЕКС СОЗДАН АВТОМАТИЧЕСКИ ДЛЯ BRAND_NM
DROP TABLE IF EXISTS PODRUZHKA.BRAND;
CREATE TABLE PODRUZHKA.BRAND (
  BRAND_NM      VARCHAR(200) PRIMARY KEY,
  FOUNDER	      VARCHAR(200) NOT NULL,
  DIRECTOR_NM	  VARCHAR(200) NOT NULL
);

INSERT INTO PODRUZHKA.BRAND (BRAND_NM, FOUNDER, DIRECTOR_NM) VALUES ('L’Oreal', 'Эжен Шуллер', 'Жан-Поль Агон');
INSERT INTO PODRUZHKA.BRAND (BRAND_NM, FOUNDER, DIRECTOR_NM) VALUES ('Maybelline', 'Т. Л. Вильямс', 'Джером Бруа');
INSERT INTO PODRUZHKA.BRAND (BRAND_NM, FOUNDER, DIRECTOR_NM) VALUES ('Max Factor', 'Максимилиан Факторович', 'Максимилиан Факторович');
INSERT INTO PODRUZHKA.BRAND (BRAND_NM, FOUNDER, DIRECTOR_NM) VALUES ('CATRICE', 'Кристина Остер-Даум', 'Кристина Остер-Даум');
INSERT INTO PODRUZHKA.BRAND (BRAND_NM, FOUNDER, DIRECTOR_NM) VALUES ('NYX', '	Toni Ko', '	Toni Ko');

DROP TABLE IF EXISTS PODRUZHKA.BUYER;
CREATE TABLE PODRUZHKA.BUYER (
  BUYER_ID	INTEGER	PRIMARY KEY,
  BUYER_NM	VARCHAR(200)	NOT NULL,
  PHONE	    varchar(12)	NOT NULL,
  DISCOUNT	INTEGER	NOT NULL,
  BIRTH_DT	DATE	NOT NULL,
  CHECK (DISCOUNT >= 0 AND DISCOUNT < 100)
);
--ЧАЩЕ ВСЕГО В ЗАПРОСЕ НАМ НУЖНЫ ИМЕНА ПОКУПАТЕЛЕЙ
CREATE INDEX INDEX_BUYER
ON PODRUZHKA.BUYER (BUYER_NM);

INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (01, 'Дедович Е. Д.', '89169739135', 10, '2000-12-06');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (02, 'Иванова А. П.', '89153458901', 15, '1985-07-01');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (03, 'Петрова Е. С.', '89051193445', 5, '1996-04-29');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (04, 'Фролова М. В.', '89034985989', 20, '1999-10-20');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (05, 'Платонова И. О.', '89164970330', 0, '1978-12-06');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (06, 'Сидорова Т. В.', '89151039130', 0, '2000-10-13');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (07, 'Тихонова П. А.', '89058039090', 10, '1995-02-28');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (08, 'Ульянова Я. С.', '89150649346', 15, '2001-01-15');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (09, 'Семёнова Т. А.', '89167897834', 5, '1989-09-30');
INSERT INTO PODRUZHKA.BUYER (BUYER_ID, BUYER_NM, PHONE, DISCOUNT, BIRTH_DT)
VALUES (10, 'Архипова Н. В.', '89160983489', 10, '1997-10-05');

--ТАК КАК В ТАБЛИЦУ ПОСТОЯННО ВНОСЯТЬСЯ ИЗМЕНЕНЕНИЯ(ДОБОВЛЯЮТЬСЯ НОВЫЕ ПОКУПКИ) ТО ИСПОЛЬЗОВАНИЕ ИНДЕКСА НЕ УЛУЧШИТ НИЧЕГО
DROP TABLE IF EXISTS PODRUZHKA.PURCHASE;
CREATE TABLE PODRUZHKA.PURCHASE (
  PURCHASE_ID	 INTEGER	PRIMARY KEY,
  BUY_DTTM	       TIMESTAMP	NOT NULL,
  BUYER_ID	   INTEGER	NOT NULL,
  COST	       INTEGER	NOT NULL,
  CHECK(COST > 0),
  FOREIGN KEY(BUYER_ID)REFERENCES PODRUZHKA.BUYER(BUYER_ID)
);

INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (01, '2019-01-08 09:05:06', 01, 1000);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (02, '2019-01-10 19:35:12', 02, 200);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (03, '2019-01-23 14:12:59', 01, 1500);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (04, '2019-02-01 11:23:03', 03, 2000);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (05, '2019-02-08 12:25:06', 07, 500);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (06, '2019-02-25 09:33:33', 06, 750);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (07, '2019-03-03 14:55:23', 05, 1000);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (08, '2019-03-15 17:13:43', 09, 1200);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (09, '2019-03-26 12:12:12', 02, 300);
INSERT INTO PODRUZHKA.PURCHASE (PURCHASE_ID, BUY_DTTM, BUYER_ID, COST)
VALUES (10, '2019-04-01 13:34:54', 10, 1000);

DROP TABLE IF EXISTS PODRUZHKA.PRODUCT;
CREATE TABLE PODRUZHKA.PRODUCT (
  PRODUCT_ID	   INTEGER	PRIMARY KEY,
  PRODUCT_NM	   VARCHAR(200)	NOT NULL,
  SOLD_FLG	     BOOL	NOT NULL,
  STOREHOUSE_ID	 INTEGER,
  SHOP_ID	       INTEGER,
  PURCHASE_ID	   INTEGER,
  COST	         INTEGER	NOT NULL,
  BRAND_NM	     VARCHAR(200)	NOT NULL,
  FOREIGN KEY(BRAND_NM) REFERENCES PODRUZHKA.BRAND(BRAND_NM),
  FOREIGN KEY(PURCHASE_ID) REFERENCES PODRUZHKA.PURCHASE(PURCHASE_ID),
  FOREIGN KEY(STOREHOUSE_ID) REFERENCES PODRUZHKA.STOREHOUSE(STOREHOUSE_ID),
  FOREIGN KEY(SHOP_ID) REFERENCES PODRUZHKA.SHOP(SHOP_ID),
  CHECK (
    STOREHOUSE_ID IS NOT NULL AND SHOP_ID IS NULL AND PURCHASE_ID IS NULL
    OR STOREHOUSE_ID IS NULL AND SHOP_ID IS NOT NULL AND PURCHASE_ID IS NULL
    OR STOREHOUSE_ID IS NULL AND SHOP_ID IS NULL AND PURCHASE_ID IS NOT NULL
    )
);
--ЧАЩЕ ВСЕГО НАМ НЕОБХОДИМО НАЗВАНИЕ ТОВАРА И НАЗВАНИЕ БРЕНДА В ЗАПРОСЕ
CREATE INDEX INDEX_PRODUCT
ON PODRUZHKA.PRODUCT (PRODUCT_NM, BRAND_NM);
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (01, 'Пудра', FALSE, NULL, 01, NULL, 500, 'NYX');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (02, 'Тональная основа', FALSE, 02, NULL, NULL, 300, 'L’Oreal');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (03, 'Румяна', TRUE, NULL, NULL, 05, 200, 'L’Oreal');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (04, 'Тени для век', FALSE, NULL, 02, NULL, 400, 'Max Factor');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (05, 'Тушь', FALSE, NULL, 04, NULL, 300, 'Maybelline');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (06, 'Пудра', FALSE, 10, NULL, NULL, 500, 'Maybelline');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (07, 'Тональная основа', TRUE, NULL, NULL, 03, 400, 'NYX');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (08, 'Тени для век', FALSE, NULL, 09, NULL, 300, 'Max Factor');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (09, 'Румяна', FALSE, 05, NULL, NULL, 300, 'CATRICE');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (10, 'Румяна', TRUE, NULL, NULL, 07, 400, 'NYX');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (16, 'Румяна', TRUE, NULL, NULL, 07, 400, 'CATRICE');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (11, 'Пудра', FALSE, NULL, 01, NULL, 500, 'L’Oreal');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (12, 'Тушь', FALSE, NULL, 03, NULL, 200, 'CATRICE');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (13, 'Тональная основа', FALSE, NULL, 04, NULL, 500, 'NYX');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (14, 'Тени', FALSE, NULL, 02, NULL, 750, 'Maybelline');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (15, 'Тушь', FALSE, NULL, 02, NULL, 440, 'NYX');
INSERT INTO PODRUZHKA.PRODUCT (PRODUCT_ID, PRODUCT_NM, SOLD_FLG, STOREHOUSE_ID, SHOP_ID, PURCHASE_ID, COST, BRAND_NM)
VALUES (17, 'Пудра', FALSE, NULL, 10, NULL, 220, 'CATRICE');

DROP TABLE IF EXISTS PODRUZHKA.EMPLOYEE;
CREATE TABLE PODRUZHKA.EMPLOYEE(
  EMPLOYEE_ID  INTEGER,
  EMPLOYEE_NM	 VARCHAR(200)	NOT NULL,
  JOB_NM	     VARCHAR(200)	NOT NULL,
  START_DT	   DATE	NOT NULL,
  END_DT	     DATE	DEFAULT('9999-12-31'),
  SHOP_ID	     INTEGER	NOT NULL,
  SALARY       INTEGER,
  PRIMARY KEY (EMPLOYEE_ID, START_DT),
  FOREIGN KEY (SHOP_ID) REFERENCES PODRUZHKA.SHOP(SHOP_ID),
  CHECK (START_DT < END_DT),
  CHECK (SALARY > 0)
);
--ЧАЩЕ ВСЕГО В ЗАПРОСЕ НАМ НУЖНЫ ИМЕНА РАБОТНИКОВ И ИХ ДОЛЖНОСТИ
CREATE INDEX INDEX_EMPLOYEE
ON PODRUZHKA.EMPLOYEE (EMPLOYEE_NM, JOB_NM);

INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (01, 'Иванов С. П.', 'Продовец консультант', '2014-01-10', '2015-12-31', 01, 10000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (02, 'Петров А. А.', 'Продовец консультант', '2014-01-10', '2015-12-31', 02, 15000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (03, 'Сидоров Н. Е', 'Продовец консультант', '2014-01-10', '2015-12-31', 03, 20000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (04, 'Иванов С. П.', 'Продовец консультант', '2016-01-10', '2017-12-31', 04, 20000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (05, 'Петров А. А.', 'Продовец консультант', '2016-01-10', '9999-12-31', 05, 20000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (06, 'Сидоров Н. Е', 'Продовец консультант', '2016-01-10', '2017-12-31', 06, 25000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (07, 'Иванов С. П.', 'Менеджер', '2018-01-10', '9999-12-31', 01, 10000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (08, 'Сидоров Н. Е', 'Менеджер', '2018-01-10', '9999-12-31', 02, 25000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (09, 'Орлов П. Н.', 'Продовец консультант', '2016-01-10', '2017-12-31', 07, 15000);
INSERT INTO PODRUZHKA.EMPLOYEE (EMPLOYEE_ID, EMPLOYEE_NM, JOB_NM, START_DT, END_DT, SHOP_ID, SALARY)
VALUES (10, 'Орлов П. Н.', 'Менеджер', '2018-01-10', '9999-12-31', 10, 20000);

--SELECT* FROM PODRUZHKA.PRODUCT;
--SELECT* FROM PODRUZHKA.BRAND;
--SELECT* FROM PODRUZHKA.BUYER;
--SELECT* FROM PODRUZHKA.PURCHASE;
--SELECT* FROM PODRUZHKA.SHOP;
--SELECT* FROM PODRUZHKA.EMPLOYEE;
--SELECT* FROM PODRUZHKA.STOREHOUSE;

--ЗАДАНИЕ 9
--ВЫНЕСЛА В ХРОНИМЫЕ ФУНКЦИИ МАСКИРОВКУ ДАННЫХ, ТАК КАК ЭТО ЛОГИЧЕСКИ ОДНА ФУНКЦИЯ + ДАННЫЙ КУСОК КОДА ИСПОЛЬЗУЕТСЯ НЕСКОЛЬКО РАЗ
DROP FUNCTION IF EXISTS MASK_PHONE;
CREATE FUNCTION MASK_PHONE(PHONE VARCHAR)RETURNS VARCHAR
AS $$
    SELECT  OVERLAY(PHONE PLACING '******' FROM 2 FOR 6);
$$ LANGUAGE SQL;
DROP FUNCTION IF EXISTS  MASK_NAME;
CREATE FUNCTION MASK_NAME(NAME VARCHAR) RETURNS VARCHAR
LANGUAGE SQL
AS $$
   SELECT OVERLAY(NAME PLACING REPEAT('*', POSITION(' ' IN NAME) - 3) FROM 3 FOR POSITION(' ' IN NAME) - 3)
$$;

--задание 8
--ПРЕДСТАВЛЕНИЕ ХРАНИТ ИМЕНА И НОМЕРА ТЕЛЕФОНОВ(ЗАМАСКИРОВАННЫЕ) ПОКУПАТЕЛЕЙ
DROP VIEW IF EXISTS PODRUZHKA.V_BUYERS;
CREATE VIEW PODRUZHKA.V_BUYERS AS
SELECT B.BUYER_NM, MASK_PHONE(B.PHONE) AS PHONE
 FROM PODRUZHKA.BUYER B;
SELECT* FROM PODRUZHKA.V_BUYERS;
--ПРЕДСТАВЛЕНИЕ ПОКУПАТЕЛЬ-ЦЕНА ПОКУПКИ(ФАМИЛИЯ ПОКУПАТЕЛЯ СКРЫТА, ВИДНО ТОЛЬКО ПЕРВЫЕ 2 БУКВЫ)
DROP VIEW IF EXISTS PODRUZHKA.V_PURCHASE;
CREATE VIEW PODRUZHKA.V_PURCHASE AS
SELECT
       MASK_NAME(BUYER_NM) AS BUYER_NM,
       P.COST
 FROM PODRUZHKA.BUYER B
 JOIN PODRUZHKA.PURCHASE P
   ON B.BUYER_ID = P.BUYER_ID;
SELECT* FROM PODRUZHKA.V_PURCHASE;
--КОЛИЧЕСТВО ПРОДАНЫХ ПРОДУКТОВ У КАЖДОГО БРЕНДА, МИНИМАЛЬНАЯ, МАКСИМАЛЬНАЯ ЦЕНА ЭТИХ ПРОДУКТОВ
DROP VIEW IF EXISTS PODRUZHKA.V_BRAND;
CREATE VIEW PODRUZHKA.V_BRAND AS
  SELECT BRAND_NM,
         COUNT(PRODUCT_ID) AS CNT,
         MIN(COST) AS MIN_COST,
         MAX(COST) AS MAX_COST
  FROM PODRUZHKA.PRODUCT
  WHERE SOLD_FLG = TRUE
  GROUP BY BRAND_NM;
SELECT * FROM PODRUZHKA.V_BRAND;

--в представлении  где находится не проданный товар
DROP VIEW IF EXISTS PODRUZHKA.V_PRODUCT;
CREATE VIEW PODRUZHKA.V_PRODUCT AS
SELECT
       PRODUCT_NM,
       BRAND_NM,
       ADRESS
 FROM PODRUZHKA.PRODUCT P
 JOIN PODRUZHKA.SHOP S
   ON S.SHOP_ID = P.SHOP_ID
UNION ALL
  SELECT
       PRODUCT_NM,
       BRAND_NM,
       ADRESS
 FROM PODRUZHKA.PRODUCT P
 JOIN PODRUZHKA.STOREHOUSE SH
   ON SH.STOREHOUSE_ID = P.STOREHOUSE_ID;
SELECT* FROM PODRUZHKA.V_PRODUCT;
--представление минимальная и максимальная цена продуктов в магазине
DROP VIEW IF EXISTS PODRUZHKA.V_MIN_MAX_COST;
CREATE VIEW PODRUZHKA.V_MIN_MAX_COST AS
  SELECT ADRESS,
         MIN(COST) AS MIN_COST,
         MAX(COST) AS MAX_COST
  FROM PODRUZHKA.SHOP S
  JOIN PODRUZHKA.PRODUCT P
    ON P.SHOP_ID = S.SHOP_ID
  GROUP BY S.SHOP_ID;
SELECT * FROM PODRUZHKA.V_MIN_MAX_COST;
--количество покупок которые сделал покупатель и общая потраченная сумма
DROP VIEW IF EXISTS PODRUZHKA.V_CNT_SUM;
CREATE VIEW PODRUZHKA.V_CNT_SUM AS
SELECT
       MASK_NAME(BUYER_NM) AS BUYER_NM,
       SUM(P.COST) AS SUM_BUY,
       COUNT(PURCHASE_ID) AS CNT_BUY
 FROM PODRUZHKA.BUYER B
 JOIN PODRUZHKA.PURCHASE P
   ON B.BUYER_ID = P.BUYER_ID
 GROUP BY B.BUYER_ID
ORDER BY  COUNT(PURCHASE_ID);
SELECT* FROM PODRUZHKA.V_CNT_SUM;
SELECT version();

DROP FUNCTION IF EXISTS  AVG_SALARY(CITY VARCHAR(100));
CREATE FUNCTION AVG_SALARY(CITY VARCHAR(100)) RETURNS NUMERIC
AS $$
  SELECT AVG(SALARY)
  FROM PODRUZHKA.EMPLOYEE E
  INNER JOIN PODRUZHKA.SHOP S
  ON E.SHOP_ID = S.SHOP_ID
  WHERE (SUBSTRING(S.ADRESS FROM 0 FOR POSITION(',' IN S.ADRESS)) = CITY)
    AND (E.END_DT = '9999-12-31');
$$ LANGUAGE SQL;


SELECT AVG_SALARY('Москва');

DROP FUNCTION IF EXISTS  HAPPY_BIRTHDAY(D INT, M INT);
CREATE FUNCTION HAPPY_BIRTHDAY(D INT, M INT) RETURNS BIGINT
AS $$
    SELECT COUNT(BUYER_NM)
    FROM PODRUZHKA.BUYER
    WHERE  (EXTRACT(DAY FROM BIRTH_DT) = D) AND (EXTRACT(MONTH FROM BIRTH_DT) =  M);
$$ LANGUAGE SQL;


SELECT HAPPY_BIRTHDAY(6, 12);